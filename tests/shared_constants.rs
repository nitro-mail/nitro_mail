/// UUID: c60fc781-ecb8-4cc3-9927-e81f97de27d3
pub const GROUP_NAMESPACE: uuid::Uuid = uuid::Uuid::from_bytes([
    0xc6, 0x0f, 0xc7, 0x81, 0xec, 0xb8, 0x4c, 0xc3, 0x99, 0x27, 0xe8, 0x1f, 0x97, 0xde, 0x27, 0xd3,
]);
pub const TEST_GROUP_NAME: &str = "must_exist_for_tests";
pub const TEST_GROUP_DESCRIPTION: &str = "test";

/// UUID: cd7aebea-4c02-5dd7-af6a-9e9d3115ac44
pub const TEST_GROUP_UUID: uuid::Uuid = uuid::Uuid::from_bytes([
    0xcd, 0x7a, 0xeb, 0xea, 0x4c, 0x02, 0x5d, 0xd7, 0xaf, 0x6a, 0x9e, 0x9d, 0x31, 0x15, 0xac, 0x44,
]);

/// UUID: 0C8D8AE6-2C13-4465-81E8-4915C520F6BA
pub const USER_NAMESPACE: uuid::Uuid = uuid::Uuid::from_bytes([
    0x0C, 0x8D, 0x8A, 0xE6, 0x2C, 0x13, 0x44, 0x65, 0x81, 0xE8, 0x49, 0x15, 0xC5, 0x20, 0xF6, 0xBA,
]);

pub const TEST_USER_NAME: &str = "must_exist_for_tests";

/// UUID 436e47bf-0904-5c5e-a292-681e104bc056
pub const TEST_USER_UUID: uuid::Uuid = uuid::Uuid::from_bytes([
    0x43, 0x6e, 0x47, 0xbf, 0x09, 0x04, 0x5c, 0x5e, 0xa2, 0x92, 0x68, 0x1e, 0x10, 0x4b, 0xc0, 0x5,
]);
